#include <bits/stdc++.h>
using namespace std;
///base class
template<class T>
class Sorting{
public:
    void virtual sort(T arr[],int size)=0;
};
///-------------------------------------------------------------------------------
///Insertion sort

template<class T>
class insertion : public Sorting<T>{
public:
void sort(T arr[],int size) override{
    cout<<"Insertion sort\n";
    for (int i = 1; i < size; ++i) {
       T temp=arr[i];
       int j=i-1;
        while (j>=0 && temp<arr[j]){
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = temp;

    }

}

};
///-------------------------------------------------------------------------------
///Selection sort
template<class T>
class selection: public Sorting<T>{
public:
    void sort(T arr[],int size) override{
        cout<<"Selection sort\n";

        for(int i=0;i<size-1;i++){
            int minIndex = i;
            for (int j = i+1; j < size; ++j) {
                if (arr[j]<arr[minIndex])
                    minIndex=j;
            }
            if(minIndex!=i);
            swap(arr[i],arr[minIndex]);
        }
    }
};
///-------------------------------------------------------------------------------
///Bubble sort
template<class T>
class bubble: public Sorting<T>{
public:
    void sort(T arr[],int size) override{
        cout<<"Bubble sort\n";
        for (int i = 0; i < size-1; ++i) {
            for (int j = i+1; j <size ; ++j) {
                if (arr[j]<arr[i])
                    swap(arr[j],arr[i]);

            }
        }
    }
};
///-------------------------------------------------------------------------------
///Shell sort
template<class T>
class Shell:public Sorting<T>{
    void shell(int arr[],int size,int k){
        if(k<=1){
            cout<<"Shell sort\n";
            return;
        }
        for(int i=k; i<size;i++){
            int j=i;
            while (j>=k && arr[j]<arr[j-k]){
                swap(arr[j],arr[j-k]);
                j=j-k;
            }
        }

    }
    void sort(int arr[],int size)override{

        int k=size/2;

        while (k){
            shell(arr,size,k);
            k/=2;
        }
    }
};
///-------------------------------------------------------------------------------
/// Merge sort
template<class T>
class Merge: public Sorting<T>{
public:
    void merge_sort(int arr[],int l,int m,int r){
        int n1 = m - l + 1;
        int n2 = r - m;
        int Larr[n1];
        int Rarr[n2];
        for (int i = 0; i < n1; ++i) {
            Larr[i]=arr[i+l];
        }
        for (int j = 0; j < n2; ++j) {
            Rarr[j]=arr[j+m+1];
        }
        int i = 0, j = 0,k=l;

        while (i<n1 && j<n2 ){
            if(Larr[i]<=Rarr[j]){
                arr[k++]=Larr[i++];
            }
            else{
                arr[k++]=Rarr[j++];
            }
        }
        while (i<n1){
            arr[k++]=Larr[i++];
        }
        while (j<n2){
            arr[k++]=Rarr[j++];
        }



    }
    void merge(int arr[],int l,int r){
        if(l>=r)return;
        int m=(l+r)/2;
        merge(arr,l,m);
        merge(arr,m+1,r);
        merge_sort(arr, l, m, r);
    }
void sort(int arr[],int size)override{
        cout<<"Merge sort\n";
    merge(arr,0,size-1);
    }


};
///-------------------------------------------------------------------------------
///Quick sort
template<class T>
class Quick : public Sorting<T>{
public:
    int partition(int arr[], int l, int r) {
        int pivot = arr[l];  // First element as pivot
        int i = l + 1;       // index for the smaller element
        int j = r;

        while (true) {

            while (i <= r && arr[i] <= pivot)
                i++;

           
            while (arr[j] > pivot)
                j--;

            if (i >= j)
                break;

            // Swap arr[i] and arr[j]
            swap(arr[i], arr[j]);
        }

        // Place pivot in its correct position
        swap(arr[l], arr[j]);
        return j;
    }

// QuickSort function
    void quickSort(int arr[], int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }
    void sort(int arr[],int size)override{
        cout<<"Quick sort\n";
        quickSort(arr,0,size-1);
    }

};
///-------------------------------------------------------------------------------
/// Context Class
template<class T>
class SorterContext {
private:
    Sorting<T>* strategy;
public:
    SorterContext(Sorting<T>* strategy = nullptr) : strategy(strategy) {}

    void setStrategy(Sorting<T>* newStrategy) {
        strategy = newStrategy;
    }

    void sort(T arr[], int size) {

            strategy->sort(arr, size);

    }
};


int main() {
    int arr[5]={2,3,1,4,5};
    int n=5;
    insertion<int>insertion;
    selection<int>selection;
    bubble<int>bubble;
    Shell<int>shell;
    Merge<int>merge;
    Quick<int>Quick;

    SorterContext<int> sorter;

    sorter.setStrategy(&Quick);
    sorter.sort(arr,n);
    for (int i = 0; i < n; ++i) {
        cout<<arr[i]<<" ";
    }
    cout<<endl;

    return 0;
}
